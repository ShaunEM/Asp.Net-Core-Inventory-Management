
@{
    ViewData["Title"] = "Goods Received Note";
}
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">

    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title text-primary"><i class="fa fa-certificate"></i> @ViewData["Title"]</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                            title="Collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">
                <div id="Grid"></div>
            </div>
            <!-- /.box-body -->
            <div class="box-footer">
              
            </div>
            <!-- /.box-footer-->
        </div>
        <!-- /.box -->
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

@section Styles{

}

@section Scripts{

    <script type="text/javascript">
        $(function () {

            var dataManager = ej.DataManager({
                url: "/api/GoodsReceivedNote",
                adaptor: new ej.WebApiAdaptor(),
                offline: true
            });

            var dataManagerBranchStore = ej.DataManager({
                url: "/api/BranchStore",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerPurchaseOrder = ej.DataManager({
                url: "/api/PurchaseOrder",
                adaptor: new ej.WebApiAdaptor()
            });

            dataManager.ready.done(function (e) { 
                $("#Grid").ejGrid({
                    dataSource: ej.DataManager({
                        json: e.result,
                        adaptor: new ej.remoteSaveAdaptor(),
                        insertUrl: "/api/GoodsReceivedNote/Insert",
                        updateUrl: "/api/GoodsReceivedNote/Update",
                        removeUrl: "/api/GoodsReceivedNote/Remove",
                    }),
                    toolbarSettings: {
                        showToolbar: true,
                        toolbarItems: ["add", "delete", "update", "cancel", "search", "printGrid"]
                    },
                    editSettings: {
                        allowEditing: true,
                        allowAdding: true,
                        allowDeleting: true,
                        showDeleteConfirmDialog: true,
                        editMode: "dialog"
                    },
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowSorting: true,
                    allowSearching: true,
                    allowFiltering: true,
                    filterSettings: {
                        filterType: "excel",
                        maxFilterChoices: 100,
                        enableCaseSensitivity: false
                    },
                    allowPaging: true,
                    pageSettings: { pageSize: 10, printMode: ej.Grid.PrintMode.CurrentPage },
                    columns: [
                        { field: "GoodsReceivedNoteId", headerText: 'GRN', isPrimaryKey: true, isIdentity: true, visible: false },
                        { field: "GoodsReceivedNoteName", headerText: 'GRN#', allowEditing: false },
                        { field: "PurchaseOrderId", headerText: 'PO#', validationRules: { required: true } },
                        //{ field: "PurchaseOrderId", headerText: 'PO#', foreignKeyField: "PurchaseOrderId", foreignKeyValue: "PurchaseOrderName", dataSource: dataManagerPurchaseOrder, validationRules: { required: true } },
                        { field: "GRNDate", headerText: 'Receiving Date', editType: "datepicker", format: "{0:MM/dd/yyyy}", validationRules: { required: true } },
                        { field: "SupplierDONumber", headerText: 'Supplier DO#', validationRules: { required: true } },
                        { field: "SupplierInvoiceNumber", headerText: 'Supplier Invoice#', },
                        { field: "BranchStoreId", headerText: 'Branch Store', foreignKeyField: "BranchStoreId", foreignKeyValue: "BranchStoreName", dataSource: dataManagerBranchStore, validationRules: { required: true }},
                    ],
                    actionComplete: "complete",
                });
            });

            
        });

        function complete(args) {
            console.log("requestType:" + args.requestType);

            if (args.requestType == 'beginedit') {
                $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
                //$("#GridBranchAreaId").attr("readonly", "readonly");
                //$("#GridPurchaseOrderId").attr("readonly", "readonly");
            }
            if (args.requestType == 'add') {
                updatePurchaseOrders();
                $('#GridPurchaseOrderId').ejDropDownList({ change: 'purchaseOrderDdlChange' });
            }
        }



        function updatePurchaseOrders(e) {
            $.ajax({
                url: '/api/PurchaseOrder',
                type: 'GET',
                success: function (data) {
                    $("#GridPurchaseOrderId").ejDropDownList({
                        dataSource: data.Items,
                        fields: { id: 'PurchaseOrderId', text: 'PurchaseOrderName', value: 'PurchaseOrderId' },
                    });
                }
            })
        }
        function purchaseOrderDdlChange(e) {
            $.ajax({
                url: '/api/BranchStore/GetBranchStoresByBranchId/' + e.selectedValue,
                type: 'GET',
                success: function (data) {
                    $("#GridBranchAreaId").ejDropDownList({
                        dataSource: data,
                        fields: { id: 'BranchStoreId', text: 'BranchStoreName', value: 'BranchStoreId' },
                    });
                }
            })
        }
    </script>
}

