@model coderush.Models.PurchaseOrder

@{
    ViewData["Title"] = "Purchase Order Detail";
}

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">

    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title"><i class="fa fa-building"></i> @ViewData["Title"]</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                            title="Collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">
                <div class="content-container-fluid">
                    <div class="row">
                        <dl class="dl-horizontal">
                            <dt>
                                @Html.DisplayNameFor(model => model.PurchaseOrderName)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.PurchaseOrderName)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.BranchStoreId)
                            </dt>
                            <dd>
                                @Html.TextBoxFor(model => model.BranchStoreId, new { @readonly = "readonly" })
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.SupplierId)
                            </dt>
                            <dd>
                                @Html.TextBoxFor(model => model.SupplierId, new { @readonly = "SupplierId" })
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.OrderDate)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.OrderDate)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.DeliveryDate)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.DeliveryDate)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.PurchaseTypeId)
                            </dt>
                            <dd>
                                @Html.TextBoxFor(model => model.PurchaseTypeId, new { @readonly = "PurchaseTypeId" })
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.Remarks)
                            </dt>
                            <dd>
                                @Html.DisplayFor(model => model.Remarks)
                            </dd>
                            <dt>
                                @Html.DisplayNameFor(model => model.Total)
                            </dt>
                            <dd>
                                @Html.TextBoxFor(model => model.Total, new { @readonly = "readonly" })
                            </dd>
                        </dl>
                    </div>
                    

                </div>
            </div>
            <!-- /.box-body -->
        </div>
        <!-- /.box -->
        <div class="box">
            <div class="box-body">
                <div class="row">
                    <div class="col-lg-12">
                        <div id="Grid"></div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->




@section Styles{

}

@section Scripts{

    <script type="text/javascript">
        $(function () {

            var dataManager = ej.DataManager({
                url: "/api/PurchaseOrderLine",
                adaptor: new ej.WebApiAdaptor(),
                headers: [{ "PurchaseOrderId": @Model.PurchaseOrderId}],
                offline: true,
            });

            var dataManagerStock = ej.DataManager({
                url: "/api/Stock",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerPurchaseOrder = ej.DataManager({
                url: "/api/PurchaseOrder",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerBranch = ej.DataManager({
                url: "/api/Branch",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerSupplier = ej.DataManager({
                url: "/api/Supplier",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerCurrency = ej.DataManager({
                url: "/api/Currency",
                adaptor: new ej.WebApiAdaptor()
            });

            var dataManagerPurchaseType = ej.DataManager({
                url: "/api/PurchaseType",
                adaptor: new ej.WebApiAdaptor()
            });

            $('#BranchId').ejDropDownList({
                dataSource: dataManagerBranch,
                fields: { id: 'BranchStoreId', text: 'BranchStoreName', value: 'BranchStoreId' },
                value: @Model.BranchStoreId,
                enabled: false,
            });

            $('#SupplierId').ejDropDownList({
                dataSource: dataManagerSupplier,
                fields: { id: 'SupplierId', text: 'SupplierName', value: 'SupplierId' },
                value: @Model.SupplierId,
                enabled: false,
            });

            $('#PurchaseTypeId').ejDropDownList({
                dataSource: dataManagerPurchaseType,
                fields: { id: 'PurchaseTypeId', text: 'PurchaseTypeName', value: 'PurchaseTypeId' },
                value: @Model.PurchaseTypeId,
                enabled: false,
            });

            dataManager.ready.done(function (e) { 
                $("#Grid").ejGrid({
                    dataSource: ej.DataManager({
                        json: e.result,
                        adaptor: new ej.remoteSaveAdaptor(),
                        insertUrl: "/api/PurchaseOrderLine/Insert",
                        updateUrl: "/api/PurchaseOrderLine/Update",
                        removeUrl: "/api/PurchaseOrderLine/Remove",
                    }),
                    toolbarSettings: {
                        showToolbar: true,
                        toolbarItems: ["add", "edit", "delete", "update", "cancel"]
                    },
                    editSettings: {
                        allowEditing: true,
                        allowAdding: true,
                        allowDeleting: true,
                        showDeleteConfirmDialog: true,

                    },
                    allowPaging: true,
                    columns: [
                        { field: "PurchaseOrderLineId", headerText: 'Line Id', isPrimaryKey: true, isIdentity: true, visible: false },
                        { field: "PurchaseOrderId", headerText: 'PO#', defaultValue: @Model.PurchaseOrderId, foreignKeyField: "PurchaseOrderId", foreignKeyValue: "PurchaseOrderName", dataSource: dataManagerPurchaseOrder, visible: false },
                        { field: "StockId", headerText: 'Stock Item', foreignKeyField: "StockId", foreignKeyValue: "StockName", dataSource: dataManagerStock },
                        { field: "Description", headerText: 'Description' },
                        { field: "QTY", headerText: 'Quantity', defaultValue: 1, editType: "numericedit", },
                        { field: "UnitPrice", headerText: 'Unit Price', defaultValue: 0, editType: "numericedit", format: "{0:n2}", editParams: { decimalPlaces: 2 } },
                        { field: "Total", headerText: 'Total', defaultValue: 0, allowEditing: false, editType: "numericedit", format: "{0:n2}" },
                    ],
                    actionComplete: "complete",
                });
            });


        });

        function complete(args) {

            if (args.requestType == 'beginedit') {
                $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
            }
            if (args.requestType == 'save' || args.requestType == 'delete') {
                RewriteTotal(args.data.PurchaseOrderId);
            }
        }

        function RewriteTotal(purchaseOrderId) {
            $.ajax({
                type: 'GET',
                url: '/api/PurchaseOrder/GetById/' + purchaseOrderId,
                success: function (data) {
                    $('#Total').val(data.Total);
                }
            });
        }



    </script>
}

